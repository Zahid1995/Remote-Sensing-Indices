var imageCollection = ee.ImageCollection("MODIS/061/MYD09GA"),
var imageCollection2 = ee.ImageCollection("MODIS/061/MOD09GA"),
//region of interest 
var Region = 
    /* color: #bf04c2 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[70.38193105198872, 34.632218599449416],
          [70.38193105198872, 33.51291695282562],
          [72.76596425511372, 33.51291695282562],
          [72.76596425511372, 34.632218599449416]]], null, false);
          
var dayOfInterest = ee.Date('2023-05-26'); // single image date for time series range of the date can be used as follows: yourImageCollection.filterDate(startDate, endDate);
// Relectance images, date filtering, cloud masking using Quality control band..
var Filter_Images = ee.ImageCollection(imageCollection2.filterBounds(Region)
  .filterDate(dayOfInterest, dayOfInterest.advance(1, 'day'))
  .map(function(image) {
                    var qa = image.select('QC_500m');
                    var mask = qa.bitwiseAnd(1 << 0).eq(0);
                    return image.updateMask(mask);
  }));
  //Clipping the region of interest (ROI)
var clipped_images = Filter_Images.map(function(image){
  return image.clip(Region);
});
// print bnad names to select appropriate bands 
print('band names', clipped_images.first().bandNames());
// set view to the ROI and zoom level
Map.centerObject(Region, 9);

// '''''''''''''''''''''''''''''''''''/ Index 1/ ''''''''''''''''''''''''''''''''''

//Calculate Bare Soil Index (BSI)=((SWIR2 + Red) - (NIR + Blue)) / ((SWIR2 + Red) + (NIR + Blue)) range -1to+1.......................
var cliped_first = clipped_images.first();
// Scale factor
var cliped_first = cliped_first.multiply(0.0001);
var BSI = cliped_first.expression(
  '((SWIR2 + Red) - (NIR + Blue)) / ((SWIR2 + Red) + (NIR + Blue))', {
    'SWIR2': cliped_first.select('sur_refl_b07'),
    'Red': cliped_first.select('sur_refl_b01'),
    'NIR': cliped_first.select('sur_refl_b02'),
    'Blue': cliped_first.select('sur_refl_b03')
});
// // stats of BSI
// // Compute mean, standard deviation, minimum and maximum
var stats = BSI.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('stats of BSI:', stats);
// Make a palette: a list of hex strings.
var palette = ['FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
               '74A901', '66A000', '529400', '3E8601', '207401', '056201',
               '004C00', '023B01', '012E01', '011D01', '011301'];

// Display the input image and the NDVI derived from it.
var visParamsBSI = {min: -1, max: 1, palette: palette};
// Display the result on the map
Map.addLayer(BSI, visParamsBSI, 'Bare Soil Index');
//Export index to drive
Export.image.toDrive({
  image: BSI.float(),
  description: 'BSI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647' // check the projection for the ROI and set accordingly, hint for finding crs: check projection of landsat data for roi
});

// '''''''''''''''''''''''''''''''''''/ Index 2/ ''''''''''''''''''''''''''''''''''

// ......................................NDVI....................................
var ndvi = cliped_first.normalizedDifference(['sur_refl_b02', 'sur_refl_b01']);
// // stats of NDVI
// // Compute mean, standard deviation, minimum and maximum
var stats = ndvi.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
print('Stats of NDVI:', stats);
// Make a palette: a list of hex strings.
var palette = ['FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
               '74A901', '66A000', '529400', '3E8601', '207401', '056201',
               '004C00', '023B01', '012E01', '011D01', '011301'];

// Display the input image and the NDVI derived from it.
var visParamsNDVI = {min: -1, max: 1, palette: palette};
Map.addLayer(ndvi, visParamsNDVI, 'NDVI');
//Export index to drive
Export.image.toDrive({
  image: ndvi.float(),
  description: 'NDVI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});

// '''''''''''''''''''''''''''''''''''/ Index 3/ ''''''''''''''''''''''''''''''''''

// ...............................Calculate NDBI..........................................
var ndbi = cliped_first.normalizedDifference(['sur_refl_b06', 'sur_refl_b02']);
// // stats of NDBI
// // Compute mean, standard deviation, minimum and maximum
var stats = ndbi.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('Stats of NDBI:', stats);
// Display NDBI
var visParamsndbi = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(ndbi, visParamsndbi, 'NDBI');
//Export index to drive
Export.image.toDrive({
  image: ndbi.float(),
  description: 'NDBI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});

// '''''''''''''''''''''''''''''''''''/ Index 4/ ''''''''''''''''''''''''''''''''''

// ..........................................BUI built-up index.  range -1to+1................................
var NDVI_image = ndvi.select('nd');
var NDBI_image = ndbi.select('nd');
var BUI = NDBI_image.subtract(NDVI_image);
var BUI = BUI.clamp(-1, 1);

// // stats of BUI
// // Compute mean, standard deviation, minimum and maximum
var stats = BUI.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('Stats of BUI:', stats);
// Make a palette: a list of hex strings.
var palette = ['FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
               '74A901', '66A000', '529400', '3E8601', '207401', '056201',
               '004C00', '023B01', '012E01', '011D01', '011301'];

// Display the input image and the NDVI derived from it.
var visParamsBUI = {min: -1, max: 1, palette: palette};
// Display the result on the map
Map.addLayer(BUI, visParamsBUI, 'Built-up Index');
//Export index to drive
Export.image.toDrive({
  image: BUI.float(),
  description: 'BUI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647' 
});

// '''''''''''''''''''''''''''''''''''/ Index 5/ ''''''''''''''''''''''''''''''''''

// ................EVI = 2.5 * ((NIR - Red) / (NIR + 6 * Red - 7.5 * Blue + 1))..............................................1
// Define function to calculate EVI................................................
// Select the red, blue and NIR bands
var red = cliped_first.select('sur_refl_b01');
var blue = cliped_first.select('sur_refl_b03');
var nir = cliped_first.select('sur_refl_b02');
// Calculate EVI
var evi = nir.subtract(red)
.divide(nir.add(red.multiply(6).subtract(blue.multiply(7.5)).add(1)))
            .multiply(2.5);
// compute stats of EVI
// Compute mean, standard deviation, minimum and maximum
var stats = evi.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});

// Print the result
print('Stats of EVI:', stats);

// Visualize EVI
var visParamsEVI = {
  min: 0,
  max: 1,
  palette: ['CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
            '74A901', '66A000', '529400', '3E8601', '207401', '056201',
            '004C00', '023B01', '012E01', '011D01', '011301']
};
// Adding EVI layer to map
Map.addLayer(evi, visParamsEVI, 'EVI');
//Export index to drive 
Export.image.toDrive({
  image: evi.float(),
  description: 'EVI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});

// '''''''''''''''''''''''''''''''''''/ Index 6/ ''''''''''''''''''''''''''''''''''
// .............. MNDWI = (Green - SWIR) / (Green + SWIR)..........................3
// Define a function to calculate MNDWI
var mndwi = cliped_first.normalizedDifference(['sur_refl_b04', 'sur_refl_b06']).rename('MNDWI');
// stats of MNDWI
// Compute mean, standard deviation, minimum and maximum
var stats = mndwi.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('stats of MNDWI:', stats);
// Visualize MNDWI
var visParamsMNDWI = {
  min: -1,
  max: 1,
  palette: ['CE7E45', 'DF923D','FCD163', '99B718',
            '74A901', '66A000', '529400', '3E8601', '207401', '056201',
            '004C00', '023B01', '012E01', '011D01', '011301']
};
// Adding MNDWI layer to map
Map.addLayer(mndwi, visParamsMNDWI, 'MNDWI');
// export index to drive
Export.image.toDrive({
  image: mndwi.float(),
  description: 'MNDWI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});
// '''''''''''''''''''''''''''''''''''/ Index 7/ ''''''''''''''''''''''''''''''''''
// .....MSAVI = (2 * NIR + 1 - sqrt((2 * NIR + 1)^2 - 8 * (NIR - Red))) / 2....................................
var red = cliped_first.select('sur_refl_b01');
var nir = cliped_first.select('sur_refl_b02');

var msavi = nir.multiply(2).add(1)
              .subtract(nir.multiply(2).add(1).pow(2).subtract(nir.subtract(red).multiply(8)).sqrt())
              .divide(2);
// stats of MSAVI              
// Compute mean, standard deviation, minimum and maximum
var stats = msavi.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// // Print the result
print('stats of MSAVI:', stats);

// Visualize msavi
var visParams = {
  min: -1,
  max: 1,
  palette: ['CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
            '74A901', '66A000', '529400', '3E8601', '207401', '056201',
            '004C00', '023B01', '012E01', '011D01', '011301']
};
// Adding MSAVI layer to map
Map.addLayer(msavi, visParams, 'MSAVI');
//Export index to drive 
Export.image.toDrive({
  image: msavi.float(),
  description: 'MSAVI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});
// '''''''''''''''''''''''''''''''''''/ Index 8/ ''''''''''''''''''''''''''''''''''
// .................NEW Built-up Index (NBI)=((SWIR)*(Red))/(NIR)..value is not in range of -1 to +1...........
var NBI = cliped_first.expression(
  '((SWIR)*(Red)) / (NIR)', {
    'SWIR': cliped_first.select('sur_refl_b06'),
    'Red': cliped_first.select('sur_refl_b01'),
    'NIR': cliped_first.select('sur_refl_b02'),
});
// // stats of NBI
// // Compute mean, standard deviation, minimum and maximum
var stats = NBI.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('stats of NBI:', stats);
var visParams = {
  min: -1,
  max: 1,
  palette: ['CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
            '74A901', '66A000', '529400', '3E8601', '207401', '056201',
            '004C00', '023B01', '012E01', '011D01', '011301']
};
// Display the result on the map
Map.addLayer(NBI, visParams, 'NBI');
//export index to drive 
Export.image.toDrive({
  image: NBI.float(),
  description: 'NBI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});
// '''''''''''''''''''''''''''''''''''/ Index 9/ ''''''''''''''''''''''''''''''''''
// ....Normalized difference Desert Index (NDDI) = SWIR2-blue/SWIR2+blue............
var nddi = cliped_first.normalizedDifference(['sur_refl_b07', 'sur_refl_b03']);
// // stats of nddi
// // Compute mean, standard deviation, minimum and maximum
var stats = nddi.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('stats of NDDI:', stats);
// Display NDDI
var visParamsnddi = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(nddi, visParamsnddi, 'NDDI');
// export index to derive 
Export.image.toDrive({
  image: nddi.float(),
  description: 'NDDI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});
// '''''''''''''''''''''''''''''''''''/ Index 10/ ''''''''''''''''''''''''''''''''''
// ...normalized difference moisture index (NDMI)=NIR-SWIR2/NIR+SWIR2.........
var ndmi = cliped_first.normalizedDifference(['sur_refl_b02', 'sur_refl_b07']);
// // stats of ndmi
// // Compute mean, standard deviation, minimum and maximum
var stats = ndmi.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('stats of NDMI:', stats);
// Display NDMI
var visParamsndmi = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(ndmi, visParamsndmi, 'NDMI');
// export data
Export.image.toDrive({
  image: ndmi.float(),
  description: 'NDMI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});
// '''''''''''''''''''''''''''''''''''/ Index 11/ ''''''''''''''''''''''''''''''''''
// normalized differential sand area index (NDSAI) = SWIR1-Red/SWIR1+Red
var NDSAI = cliped_first.normalizedDifference(['sur_refl_b06', 'sur_refl_b01']);

// // stats of NDSAI
// // Compute mean, standard deviation, minimum and maximum
var stats = NDSAI.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('stats of NDSAI:', stats);
// Display NDSAI
var visParamsndsai = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(NDSAI, visParamsndsai, 'NDSAI');
// export data to google drive 
Export.image.toDrive({
  image: NDSAI.float(),
  description: 'NDSAI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});
// '''''''''''''''''''''''''''''''''''/ Index 12/ ''''''''''''''''''''''''''''''''''
// normalized differential sand dune index (NDSDI) = Red-SWIR2/Red+SWIR2
var NDSDI = cliped_first.normalizedDifference(['sur_refl_b01', 'sur_refl_b07']);

// // stats of NDSDI
// // Compute mean, standard deviation, minimum and maximum
var stats = NDSDI.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('stats of NDSDI:', stats);
// Display NDSDI
var visParamsndsdi = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(NDSDI, visParamsndsdi, 'NDSDI');
// export data to drive 
Export.image.toDrive({
  image: NDSDI.float(),
  description: 'NDSDI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});
// '''''''''''''''''''''''''''''''''''/ Index 13/ ''''''''''''''''''''''''''''''''''
// ..ND soil index.....NDSI-2=SWIR2-Green/SWIR2+Green...........
var ndsi2 = cliped_first.normalizedDifference(['sur_refl_b07', 'sur_refl_b04']);
// // stats of ndsi2
// // Compute mean, standard deviation, minimum and maximum
var stats = ndsi2.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('stats of NDSI-2:', stats);
// Display ndsi2
var visParamsndsi2 = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(ndsi2, visParamsndsi2, 'NDSI-2');
// export data to drive 
Export.image.toDrive({
  image: ndsi2.float(),
  description: 'NDSI-2',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});
// '''''''''''''''''''''''''''''''''''/ Index 14/ ''''''''''''''''''''''''''''''''''
// Define a function to calculate NDWI
  var NDWI = cliped_first.normalizedDifference(['sur_refl_b02', 'sur_refl_b06']).rename('NDWI');
// stats of NDWI
// Compute mean, standard deviation, minimum and maximum
var stats = NDWI.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('stats of NDWI:', stats);
// Visualize NDWI
var visParamsNDWI = {
  min: -1,
  max: 1,
  palette: ['FCD163', '99B718',
            '74A901', '66A000', '529400', '3E8601', '207401', '056201',
            '004C00', '023B01', '012E01', '011D01', '011301']
};
// Adding layer to map
Map.addLayer(NDWI, visParamsNDWI, 'NDWI');
//export data to drive 
Export.image.toDrive({
  image: NDWI.float(),
  description: 'NDWI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});
// '''''''''''''''''''''''''''''''''''/ Index 15/ ''''''''''''''''''''''''''''''''''
// ....Normalized Multiband Drought Index (NMDI)=NIR-(SWIR1-SWIR2)/NIR+(SWIR1-SWIR2).....
var nir = cliped_first.select('sur_refl_b02');
var swir1 = cliped_first.select('sur_refl_b06');
var swir2 = cliped_first.select('sur_refl_b07');
//applying formula 
var nmdi = nir.subtract(swir1.subtract(swir2)).divide(nir.add(swir1.subtract(swir2)));
var nmdi = nmdi.clamp(-1, 1); // some region may have values that exceed the range therefore this function can clip the values with -1 to 1
// stats of NMDI
// Compute mean, standard deviation, minimum and maximum
var stats = nmdi.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('stats of NMDI:', stats);

// Visualize NMDI
var visParamsNDWI = {
  min: 0,
  max: 1,
  palette: ['FCD163', '99B718',
            '74A901', '66A000', '529400', '3E8601', '207401', '056201',
            '004C00', '023B01', '012E01', '011D01', '011301']
};
// Adding NMDI layer to map
Map.addLayer(nmdi, visParamsNDWI, 'NMDI');
//export data to google drive 
Export.image.toDrive({
  image: nmdi.float(),
  description: 'NMDI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});
// '''''''''''''''''''''''''''''''''''/ Index 16/ ''''''''''''''''''''''''''''''''''
// .Optimal soil adjusted vegetation index (OSAVI) = (NIR-Red) / (NIR+Red+0.16).........
var osavi = cliped_first.expression(
  '(NIR-Red) / (NIR+Red+0.16)', {
    'Red': cliped_first.select('sur_refl_b01'),
    'NIR': cliped_first.select('sur_refl_b02'),
}).rename('OSAVI').float();
// // stats of osavi
// // Compute mean, standard deviation, minimum and maximum
var stats = osavi.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('stats of OSAVI:', stats);
// Display OSAVI
var visParamsosavi = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(osavi, visParamsosavi, 'OSAVI');
//export index to google drive 
Export.image.toDrive({
  image: osavi.float(),
  description: 'OSAVI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});
// '''''''''''''''''''''''''''''''''''/ Index 17/ ''''''''''''''''''''''''''''''''''
// // ........SAVI = ((nir-red)/(nir+red)+L)*(1+L) ...............................4

// Select bands B1 (red) and B2 (NIR) for SAVI calculation
var red = cliped_first.select('sur_refl_b01');
var nir = cliped_first.select('sur_refl_b02');
// Calculate SAVI
var L = 0.5;  // Soil brightness factor
var SAVI = nir.subtract(red).divide(nir.add(red).add(L)).multiply(1 + L);
// var SAVI = SAVI.clamp(-1, 1);

//stats of SAVI
// Compute mean, standard deviation, minimum and maximum....optional just to check stats
var stats = SAVI.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('stats of SAVI:', stats);
// Set visualization parameters
var visParamsSAVI = {
  min: -1,
  max: 1,
  palette: ['red', 'yellow', 'green']
};
// Add SAVI to map
Map.addLayer(SAVI, visParamsSAVI, 'SAVI');
//export SAVI to google drive 
Export.image.toDrive({
  image: SAVI.float(),
  description: 'SAVI',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});
// '''''''''''''''''''''''''''''''''''/ Index 18/ ''''''''''''''''''''''''''''''''''
// ......Calculate Urban Ibdex (UI)=(SWIR2-NIR)/(SWIR2+NIR)..........................................
var ui = cliped_first.normalizedDifference(['sur_refl_b07', 'sur_refl_b02']);
// // stats of ui
// // Compute mean, standard deviation, minimum and maximum
var stats = ui.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(),
    sharedInputs: true
  }).combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: Region,
  scale: 500
});
// Print the result
print('stats of UI:', stats);

// Display UI
var visParamsUI = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(ui, visParamsUI, 'UI');
//export data to google drive 
Export.image.toDrive({
  image: ui.float(),
  description: 'UI_2023-05-26',
  scale: 500,
  region: Region,
  folder: 'GEE',
  crs: 'EPSG:32647'
});

